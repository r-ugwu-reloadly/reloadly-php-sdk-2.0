<?php

declare(strict_types=1);

/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ReloadlySdkLib\Controllers;

use ReloadlySdkLib\Exceptions\ApiException;
use ReloadlySdkLib\ConfigurationInterface;
use ReloadlySdkLib\ApiHelper;
use ReloadlySdkLib\Http\HttpRequest;
use ReloadlySdkLib\Http\HttpResponse;
use ReloadlySdkLib\Http\HttpMethod;
use ReloadlySdkLib\Http\HttpContext;
use ReloadlySdkLib\Http\HttpCallBack;
use ReloadlySdkLib\Server;

class UtilityPaymentsUtilityBillersController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param int|null $id This is the unique identification number of each biller. It uniquely
     *        identifies the biller servicing the utility.
     * @param string|null $name This indicates the biller's name. In situations where the biller's
     *        name is exceptionally long, partial names are used.
     * @param string|null $type This indicates the type of utility payment handled by the biller.
     *        Values included are ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT
     *        and INTERNET_BILL_PAYMENT.
     * @param string|null $serviceType This indicates the payment service type being rendered by the
     *        utility biller service. Examples are PREPAID and POSTPAID.
     * @param string|null $countryISOCode This indicates the ISO code of the country where the
     *        utility biller is operating in.
     * @param int|null $page This indicates the page of the billers list being retrieved. Default
     *        value is 1.
     * @param int|null $size This indicates the number of billers to be retrieved on a page. Default
     *        value is 200.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyUtilityPaymentsBillers(
        string $accept,
        string $authorization,
        ?int $id = null,
        ?string $name = null,
        ?string $type = null,
        ?string $serviceType = null,
        ?string $countryISOCode = null,
        ?int $page = null,
        ?int $size = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::UTILITY_PAYMENTS) . '/billers';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'id'             => $id,
            'name'           => $name,
            'type'           => $type,
            'serviceType'    => $serviceType,
            'countryISOCode' => $countryISOCode,
            'page'           => $page,
            'size'           => $size,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'          => $accept,
            'Authorization'   => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Not Found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }
}
