<?php

declare(strict_types=1);

/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ReloadlySdkLib\Controllers;

use ReloadlySdkLib\Exceptions\ApiException;
use ReloadlySdkLib\ConfigurationInterface;
use ReloadlySdkLib\ApiHelper;
use ReloadlySdkLib\Http\HttpRequest;
use ReloadlySdkLib\Http\HttpResponse;
use ReloadlySdkLib\Http\HttpMethod;
use ReloadlySdkLib\Http\HttpContext;
use ReloadlySdkLib\Http\HttpCallBack;
use ReloadlySdkLib\Server;

class AirtimeTransactionsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param int|null $size This indicates the number of transactions to be retrieved on a page.
     *        Default value is 200.
     * @param int|null $page This indicates the page of the transactions list being retrieved.
     *        Default value is 1.
     * @param int|null $countrycode Indicates the ISO code of the country assigned to the top-up's
     *        receiver at the time the top-up transaction was made.
     * @param string|null $operatorid Indicates the operator identification number assigned to the
     *        top-up transaction at the time it was made.
     * @param string|null $operatorName Indicates the operator name assigned to the top-up
     *        transaction at the time it was made.
     * @param string|null $customIdentifier Indicates the unique reference assigned to the top-up
     *        transaction at the time it was made.
     * @param string|null $startDate Indicates the beginning of the timeframe range for the
     *        transactions to be retrieved.
     * @param string|null $endDate String Indicates the end of the timeframe range for the
     *        transactions to be retrieved.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeTransactions(
        string $accept,
        string $authorization,
        ?int $size = null,
        ?int $page = null,
        ?int $countrycode = null,
        ?string $operatorid = null,
        ?string $operatorName = null,
        ?string $customIdentifier = null,
        ?string $startDate = null,
        ?string $endDate = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) . '/topups/reports/transactions';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'size'             => $size,
            'page'             => $page,
            'countrycode'      => $countrycode,
            'operatorid'       => $operatorid,
            'operatorName'     => $operatorName,
            'customIdentifier' => $customIdentifier,
            'startDate'        => $startDate,
            'endDate'          => $endDate,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'     => self::$userAgent,
            'Accept'           => $accept,
            'Authorization'    => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Not Found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param int $transactionid This indicates the identification number of the transaction to be
     *        retrieved.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeTransactionById(string $accept, string $authorization, int $transactionid)
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) .
            '/topups/reports/transactions/{transactionid}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'transactionid' => $transactionid,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'          => $accept,
            'Authorization'   => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Airtime transaction not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }
}
