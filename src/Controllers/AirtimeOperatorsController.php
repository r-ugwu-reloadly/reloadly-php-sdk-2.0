<?php

declare(strict_types=1);

/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ReloadlySdkLib\Controllers;

use ReloadlySdkLib\Exceptions\ApiException;
use ReloadlySdkLib\ConfigurationInterface;
use ReloadlySdkLib\ApiHelper;
use ReloadlySdkLib\Http\HttpRequest;
use ReloadlySdkLib\Http\HttpResponse;
use ReloadlySdkLib\Http\HttpMethod;
use ReloadlySdkLib\Http\HttpContext;
use ReloadlySdkLib\Http\HttpCallBack;
use ReloadlySdkLib\Server;

class AirtimeOperatorsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param string|null $includeBundles Indicates if any airtime and data bundles being offered by
     *        the operator should be included in the API response. Default value is true.
     * @param string|null $includeData Indicates if any airtime or data plans being offered by the
     *        operator should be included in the API response. Default value is true.
     * @param string|null $suggestedAmountsMap Indicates if this field should be returned as a
     *        response. Default value is false.
     * @param string|null $size This indicates the number of operators to be retrieved on a page.
     *        Default value is 200.
     * @param string|null $page This indicates the page of the operator list being retrieved.
     *        Default value is 1.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeOperators(
        string $accept,
        string $authorization,
        ?string $includeBundles = null,
        ?string $includeData = null,
        ?string $suggestedAmountsMap = null,
        ?string $size = null,
        ?string $page = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) . '/operators';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'includeBundles'      => $includeBundles,
            'includeData'         => $includeData,
            'suggestedAmountsMap' => $suggestedAmountsMap,
            'size'                => $size,
            'page'                => $page,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'        => self::$userAgent,
            'Accept'              => $accept,
            'Authorization'       => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Not Found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param string $phone The mobile number whose details are to be retrieved.
     * @param string $countryisocode The ISO code of the country where the mobile number is
     *        registered.
     * @param string $countrycode
     * @param bool|null $suggestedAmounts Indicates if this field should be returned as a response.
     *        Default value is false.
     * @param bool|null $suggestedAmountsMap Indicates if this field should be returned as a
     *        response. Default value is false.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeOperatorAutodetect(
        string $accept,
        string $authorization,
        string $phone,
        string $countryisocode,
        string $countrycode,
        ?bool $suggestedAmounts = null,
        ?bool $suggestedAmountsMap = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) .
            '/operators/auto-detect/phone/{phone}/countries/{countrycode}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'phone'               => $phone,
            'countryisocode'      => $countryisocode,
            'countrycode'         => $countrycode,
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'suggestedAmounts'    => var_export($suggestedAmounts, true),
            'suggestedAmountsMap' => var_export($suggestedAmountsMap, true),
        ]);

        //prepare headers
        $_headers = [
            'user-agent'        => self::$userAgent,
            'Accept'              => $accept,
            'Authorization'       => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException(
                'Country code must be 2 characters ISO-Alpha-2 country code. See https://www.iban.com' .
                '/country-codes',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param string $operatorid The operator's identification number.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeOperatorById(string $accept, string $authorization, string $operatorid)
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) . '/operators/{operatorid}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'operatorid'    => $operatorid,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'          => $accept,
            'Authorization'   => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Operator not found for given id', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param string $countrycode The ISO code of the country where the operator is registered.
     * @param bool $includeBundles Indicates if any airtime and data bundles being offered by the
     *        operator should be returned as a response. Default value is true.
     * @param bool|null $suggestedAmountsMap Indicates if this field should be returned as a
     *        response. Default value is false.
     * @param string|null $suggestedAmounts Indicates if this field should be returned as a
     *        response. Default value is false.
     * @param bool|null $includePin Indicates if PIN details if applicable to the operator, should
     *        be returned as a response. Default value is true.
     * @param bool|null $includeData Indicates if any data plans being offered by the operator
     *        should be returned as a response. Default value is true.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyAirtimeOperatorByIso(
        string $accept,
        string $authorization,
        string $countrycode,
        bool $includeBundles,
        ?bool $suggestedAmountsMap = null,
        ?string $suggestedAmounts = null,
        ?bool $includePin = null,
        ?bool $includeData = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::AIRTIME) .
            '/operators/countries/{countrycode}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'countrycode'         => $countrycode,
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'Authorization'       => $authorization,
            'includeBundles'      => var_export($includeBundles, true),
            'suggestedAmountsMap' => var_export($suggestedAmountsMap, true),
            'suggestedAmounts'    => $suggestedAmounts,
            'includePin'          => var_export($includePin, true),
            'includeData'         => var_export($includeData, true),
        ]);

        //prepare headers
        $_headers = [
            'user-agent'        => self::$userAgent,
            'Accept'              => $accept
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Country not found and/or not currently supported', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }
}
