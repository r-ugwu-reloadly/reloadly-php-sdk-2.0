<?php

declare(strict_types=1);

/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ReloadlySdkLib\Controllers;

use ReloadlySdkLib\Exceptions\ApiException;
use ReloadlySdkLib\ConfigurationInterface;
use ReloadlySdkLib\ApiHelper;
use ReloadlySdkLib\Http\HttpRequest;
use ReloadlySdkLib\Http\HttpResponse;
use ReloadlySdkLib\Http\HttpMethod;
use ReloadlySdkLib\Http\HttpContext;
use ReloadlySdkLib\Http\HttpCallBack;
use ReloadlySdkLib\Server;

class UtilityPaymentsTransactionsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param string|null $referenceId The reference ID you may have specified while placing the
     *        transaction.
     * @param int|null $page The page to be retrieved from the transaction list.
     * @param int|null $size Number of items to include in a single page.
     * @param string|null $startDate Indicates the start date for the range of transactions to be
     *        retrieved.
     * @param string|null $endDate Indicates the end date for the range of transactions to be
     *        retrieved.
     * @param string|null $status The transaction's status. Can be either PROCESSING, SUCCESSFUL,
     *        FAILED, or REFUNDED.
     * @param string|null $serviceType The biller's service type. Can be either PREPAID or POSTPAID.
     * @param string|null $billerType The biller's type. Can be either ELECTRICITY_BILL_PAYMENT,
     *        WATER_BILL_PAYMENT, TV_BILL_PAYMENT, or INTERNET_BILL_PAYMENT
     * @param string|null $billerCountryCode Indicates the ISO code of the country where the biller
     *        is located.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyUtilityPaymentsTransactions(
        string $accept,
        string $authorization,
        ?string $referenceId = null,
        ?int $page = null,
        ?int $size = null,
        ?string $startDate = null,
        ?string $endDate = null,
        ?string $status = null,
        ?string $serviceType = null,
        ?string $billerType = null,
        ?string $billerCountryCode = null
    ) {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::UTILITY_PAYMENTS) . '/transactions';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'referenceId'       => $referenceId,
            'page'              => $page,
            'size'              => $size,
            'startDate'         => $startDate,
            'endDate'           => $endDate,
            'status'            => $status,
            'serviceType'       => $serviceType,
            'billerType'        => $billerType,
            'billerCountryCode' => $billerCountryCode,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'      => self::$userAgent,
            'Accept'            => $accept,
            'Authorization'     => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Not Found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }

    /**
     * @param string $accept
     * @param string $authorization
     * @param int $id The utility payment's identification number.
     *
     * @return mixed Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reloadlyUtilityPaymentsTransactionById(string $accept, string $authorization, int $id)
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::UTILITY_PAYMENTS) . '/transactions/{id}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'id'            => $id,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'          => $accept,
            'Authorization'   => $authorization
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new ApiException(
                'Full authentication is required to access this resource',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw new ApiException('Not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }
}
