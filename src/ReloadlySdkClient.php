<?php

declare(strict_types=1);

/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ReloadlySdkLib;

use ReloadlySdkLib\Controllers;

/**
 * ReloadlySdkLib client class
 */
class ReloadlySdkClient implements ConfigurationInterface
{
    private $authentication;
    private $airtimeAccountBalance;
    private $airtimeCountries;
    private $airtimeOperators;
    private $airtimeFXRates;
    private $airtimeCommissions;
    private $airtimePromotions;
    private $airtimeTopups;
    private $airtimeTransactions;
    private $giftCardsAccountBalance;
    private $giftCardsCountries;
    private $giftCardsProducts;
    private $giftCardsRedeemInstructions;
    private $giftCardsDiscounts;
    private $giftCardsTransactions;
    private $giftCardsOrders;
    private $airtimeNumberLookup;
    private $utilityPaymentsAccountBalance;
    private $utilityPaymentsUtilityBillers;
    private $utilityPaymentsPayBill;
    private $utilityPaymentsTransactions;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $enableRetries = ConfigurationDefaults::ENABLE_RETRIES;
    private $numberOfRetries = ConfigurationDefaults::NUMBER_OF_RETRIES;
    private $retryInterval = ConfigurationDefaults::RETRY_INTERVAL;
    private $backOffFactor = ConfigurationDefaults::BACK_OFF_FACTOR;
    private $maximumRetryWaitTime = ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    private $retryOnTimeout = ConfigurationDefaults::RETRY_ON_TIMEOUT;
    private $httpStatusCodesToRetry = ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    private $httpMethodsToRetry = ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['enableRetries'])) {
            $this->enableRetries = $configOptions['enableRetries'];
        }
        if (isset($configOptions['numberOfRetries'])) {
            $this->numberOfRetries = $configOptions['numberOfRetries'];
        }
        if (isset($configOptions['retryInterval'])) {
            $this->retryInterval = $configOptions['retryInterval'];
        }
        if (isset($configOptions['backOffFactor'])) {
            $this->backOffFactor = $configOptions['backOffFactor'];
        }
        if (isset($configOptions['maximumRetryWaitTime'])) {
            $this->maximumRetryWaitTime = $configOptions['maximumRetryWaitTime'];
        }
        if (isset($configOptions['retryOnTimeout'])) {
            $this->retryOnTimeout = $configOptions['retryOnTimeout'];
        }
        if (isset($configOptions['httpStatusCodesToRetry'])) {
            $this->httpStatusCodesToRetry = $configOptions['httpStatusCodesToRetry'];
        }
        if (isset($configOptions['httpMethodsToRetry'])) {
            $this->httpMethodsToRetry = $configOptions['httpMethodsToRetry'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->enableRetries)) {
            $configMap['enableRetries'] = $this->enableRetries;
        }
        if (isset($this->numberOfRetries)) {
            $configMap['numberOfRetries'] = $this->numberOfRetries;
        }
        if (isset($this->retryInterval)) {
            $configMap['retryInterval'] = $this->retryInterval;
        }
        if (isset($this->backOffFactor)) {
            $configMap['backOffFactor'] = $this->backOffFactor;
        }
        if (isset($this->maximumRetryWaitTime)) {
            $configMap['maximumRetryWaitTime'] = $this->maximumRetryWaitTime;
        }
        if (isset($this->retryOnTimeout)) {
            $configMap['retryOnTimeout'] = $this->retryOnTimeout;
        }
        if (isset($this->httpStatusCodesToRetry)) {
            $configMap['httpStatusCodesToRetry'] = $this->httpStatusCodesToRetry;
        }
        if (isset($this->httpMethodsToRetry)) {
            $configMap['httpMethodsToRetry'] = $this->httpMethodsToRetry;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->enableRetries;
    }

    public function getNumberOfRetries(): int
    {
        return $this->numberOfRetries;
    }

    public function getRetryInterval(): float
    {
        return $this->retryInterval;
    }

    public function getBackOffFactor(): float
    {
        return $this->backOffFactor;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->maximumRetryWaitTime;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->retryOnTimeout;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->httpStatusCodesToRetry;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->httpMethodsToRetry;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::AUTHENTICATION): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Authentication Controller
     */
    public function getAuthenticationController(): Controllers\AuthenticationController
    {
        if ($this->authentication == null) {
            $this->authentication = new Controllers\AuthenticationController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->authentication;
    }

    /**
     * Returns Airtime Account Balance Controller
     */
    public function getAirtimeAccountBalanceController(): Controllers\AirtimeAccountBalanceController
    {
        if ($this->airtimeAccountBalance == null) {
            $this->airtimeAccountBalance = new Controllers\AirtimeAccountBalanceController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeAccountBalance;
    }

    /**
     * Returns Airtime Countries Controller
     */
    public function getAirtimeCountriesController(): Controllers\AirtimeCountriesController
    {
        if ($this->airtimeCountries == null) {
            $this->airtimeCountries = new Controllers\AirtimeCountriesController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeCountries;
    }

    /**
     * Returns Airtime Operators Controller
     */
    public function getAirtimeOperatorsController(): Controllers\AirtimeOperatorsController
    {
        if ($this->airtimeOperators == null) {
            $this->airtimeOperators = new Controllers\AirtimeOperatorsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeOperators;
    }

    /**
     * Returns Airtime FX Rates Controller
     */
    public function getAirtimeFXRatesController(): Controllers\AirtimeFXRatesController
    {
        if ($this->airtimeFXRates == null) {
            $this->airtimeFXRates = new Controllers\AirtimeFXRatesController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeFXRates;
    }

    /**
     * Returns Airtime Commissions Controller
     */
    public function getAirtimeCommissionsController(): Controllers\AirtimeCommissionsController
    {
        if ($this->airtimeCommissions == null) {
            $this->airtimeCommissions = new Controllers\AirtimeCommissionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeCommissions;
    }

    /**
     * Returns Airtime Promotions Controller
     */
    public function getAirtimePromotionsController(): Controllers\AirtimePromotionsController
    {
        if ($this->airtimePromotions == null) {
            $this->airtimePromotions = new Controllers\AirtimePromotionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimePromotions;
    }

    /**
     * Returns Airtime Topups Controller
     */
    public function getAirtimeTopupsController(): Controllers\AirtimeTopupsController
    {
        if ($this->airtimeTopups == null) {
            $this->airtimeTopups = new Controllers\AirtimeTopupsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeTopups;
    }

    /**
     * Returns Airtime Transactions Controller
     */
    public function getAirtimeTransactionsController(): Controllers\AirtimeTransactionsController
    {
        if ($this->airtimeTransactions == null) {
            $this->airtimeTransactions = new Controllers\AirtimeTransactionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeTransactions;
    }

    /**
     * Returns Gift Cards Account Balance Controller
     */
    public function getGiftCardsAccountBalanceController(): Controllers\GiftCardsAccountBalanceController
    {
        if ($this->giftCardsAccountBalance == null) {
            $this->giftCardsAccountBalance = new Controllers\GiftCardsAccountBalanceController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsAccountBalance;
    }

    /**
     * Returns Gift Cards Countries Controller
     */
    public function getGiftCardsCountriesController(): Controllers\GiftCardsCountriesController
    {
        if ($this->giftCardsCountries == null) {
            $this->giftCardsCountries = new Controllers\GiftCardsCountriesController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsCountries;
    }

    /**
     * Returns Gift Cards Products Controller
     */
    public function getGiftCardsProductsController(): Controllers\GiftCardsProductsController
    {
        if ($this->giftCardsProducts == null) {
            $this->giftCardsProducts = new Controllers\GiftCardsProductsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsProducts;
    }

    /**
     * Returns Gift Cards Redeem Instructions Controller
     */
    public function getGiftCardsRedeemInstructionsController(): Controllers\GiftCardsRedeemInstructionsController
    {
        if ($this->giftCardsRedeemInstructions == null) {
            $this->giftCardsRedeemInstructions = new Controllers\GiftCardsRedeemInstructionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsRedeemInstructions;
    }

    /**
     * Returns Gift Cards Discounts Controller
     */
    public function getGiftCardsDiscountsController(): Controllers\GiftCardsDiscountsController
    {
        if ($this->giftCardsDiscounts == null) {
            $this->giftCardsDiscounts = new Controllers\GiftCardsDiscountsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsDiscounts;
    }

    /**
     * Returns Gift Cards Transactions Controller
     */
    public function getGiftCardsTransactionsController(): Controllers\GiftCardsTransactionsController
    {
        if ($this->giftCardsTransactions == null) {
            $this->giftCardsTransactions = new Controllers\GiftCardsTransactionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsTransactions;
    }

    /**
     * Returns Gift Cards Orders Controller
     */
    public function getGiftCardsOrdersController(): Controllers\GiftCardsOrdersController
    {
        if ($this->giftCardsOrders == null) {
            $this->giftCardsOrders = new Controllers\GiftCardsOrdersController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->giftCardsOrders;
    }

    /**
     * Returns Airtime Number Lookup Controller
     */
    public function getAirtimeNumberLookupController(): Controllers\AirtimeNumberLookupController
    {
        if ($this->airtimeNumberLookup == null) {
            $this->airtimeNumberLookup = new Controllers\AirtimeNumberLookupController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->airtimeNumberLookup;
    }

    /**
     * Returns Utility Payments Account Balance Controller
     */
    public function getUtilityPaymentsAccountBalanceController(): Controllers\UtilityPaymentsAccountBalanceController
    {
        if ($this->utilityPaymentsAccountBalance == null) {
            $this->utilityPaymentsAccountBalance = new Controllers\UtilityPaymentsAccountBalanceController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->utilityPaymentsAccountBalance;
    }

    /**
     * Returns Utility Payments Utility Billers Controller
     */
    public function getUtilityPaymentsUtilityBillersController(): Controllers\UtilityPaymentsUtilityBillersController
    {
        if ($this->utilityPaymentsUtilityBillers == null) {
            $this->utilityPaymentsUtilityBillers = new Controllers\UtilityPaymentsUtilityBillersController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->utilityPaymentsUtilityBillers;
    }

    /**
     * Returns Utility Payments Pay Bill Controller
     */
    public function getUtilityPaymentsPayBillController(): Controllers\UtilityPaymentsPayBillController
    {
        if ($this->utilityPaymentsPayBill == null) {
            $this->utilityPaymentsPayBill = new Controllers\UtilityPaymentsPayBillController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->utilityPaymentsPayBill;
    }

    /**
     * Returns Utility Payments Transactions Controller
     */
    public function getUtilityPaymentsTransactionsController(): Controllers\UtilityPaymentsTransactionsController
    {
        if ($this->utilityPaymentsTransactions == null) {
            $this->utilityPaymentsTransactions = new Controllers\UtilityPaymentsTransactionsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->utilityPaymentsTransactions;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::AUTHENTICATION => 'https://auth.reloadly.com/oauth',
            Server::GIFT_CARDS => 'https://giftcards.reloadly.com',
            Server::UTILITY_PAYMENTS => 'https://utilities.reloadly.com',
            Server::AIRTIME => 'https://topups.reloadly.com',
        ],
    ];
}
